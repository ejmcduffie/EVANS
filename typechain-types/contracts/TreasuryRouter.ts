/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TreasuryRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AR_PER_GB"
      | "LINK_PER_CALL"
      | "anc"
      | "ancUsdFeed"
      | "ar"
      | "arUsdFeed"
      | "link"
      | "linkUsdFeed"
      | "purchaseStorage"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "StoragePurchased"): EventFragment;

  encodeFunctionData(functionFragment: "AR_PER_GB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LINK_PER_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "anc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ancUsdFeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ar", values?: undefined): string;
  encodeFunctionData(functionFragment: "arUsdFeed", values?: undefined): string;
  encodeFunctionData(functionFragment: "link", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "linkUsdFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseStorage",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "AR_PER_GB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LINK_PER_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "anc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ancUsdFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arUsdFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "link", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkUsdFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseStorage",
    data: BytesLike
  ): Result;
}

export namespace StoragePurchasedEvent {
  export type InputTuple = [
    user: AddressLike,
    gibBought: BigNumberish,
    ancSpent: BigNumberish,
    arAllocated: BigNumberish,
    linkAllocated: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    gibBought: bigint,
    ancSpent: bigint,
    arAllocated: bigint,
    linkAllocated: bigint
  ];
  export interface OutputObject {
    user: string;
    gibBought: bigint;
    ancSpent: bigint;
    arAllocated: bigint;
    linkAllocated: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TreasuryRouter extends BaseContract {
  connect(runner?: ContractRunner | null): TreasuryRouter;
  waitForDeployment(): Promise<this>;

  interface: TreasuryRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AR_PER_GB: TypedContractMethod<[], [bigint], "view">;

  LINK_PER_CALL: TypedContractMethod<[], [bigint], "view">;

  anc: TypedContractMethod<[], [string], "view">;

  ancUsdFeed: TypedContractMethod<[], [string], "view">;

  ar: TypedContractMethod<[], [string], "view">;

  arUsdFeed: TypedContractMethod<[], [string], "view">;

  link: TypedContractMethod<[], [string], "view">;

  linkUsdFeed: TypedContractMethod<[], [string], "view">;

  purchaseStorage: TypedContractMethod<
    [gib: BigNumberish, apiCalls: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AR_PER_GB"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LINK_PER_CALL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "anc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ancUsdFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ar"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "arUsdFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "link"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "linkUsdFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseStorage"
  ): TypedContractMethod<
    [gib: BigNumberish, apiCalls: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "StoragePurchased"
  ): TypedContractEvent<
    StoragePurchasedEvent.InputTuple,
    StoragePurchasedEvent.OutputTuple,
    StoragePurchasedEvent.OutputObject
  >;

  filters: {
    "StoragePurchased(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      StoragePurchasedEvent.InputTuple,
      StoragePurchasedEvent.OutputTuple,
      StoragePurchasedEvent.OutputObject
    >;
    StoragePurchased: TypedContractEvent<
      StoragePurchasedEvent.InputTuple,
      StoragePurchasedEvent.OutputTuple,
      StoragePurchasedEvent.OutputObject
    >;
  };
}
