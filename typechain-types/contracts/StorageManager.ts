/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface StorageManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ancToken"
      | "getTotalANCSpent"
      | "getTotalPaidForFile"
      | "getUserPaidForFile"
      | "initialize"
      | "owner"
      | "payForFileStorage"
      | "renounceOwnership"
      | "totalANCSpent"
      | "totalPaidANC"
      | "transferOwnership"
      | "userPaidANC"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ANCSpent"
      | "FileStoragePaid"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ancToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalANCSpent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPaidForFile",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPaidForFile",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payForFileStorage",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalANCSpent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPaidANC",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPaidANC",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ancToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalANCSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPaidForFile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPaidForFile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payForFileStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalANCSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPaidANC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPaidANC",
    data: BytesLike
  ): Result;
}

export namespace ANCSpentEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    purpose: string
  ];
  export type OutputTuple = [user: string, amount: bigint, purpose: string];
  export interface OutputObject {
    user: string;
    amount: bigint;
    purpose: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FileStoragePaidEvent {
  export type InputTuple = [
    user: AddressLike,
    fileHash: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, fileHash: string, amount: bigint];
  export interface OutputObject {
    user: string;
    fileHash: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StorageManager extends BaseContract {
  connect(runner?: ContractRunner | null): StorageManager;
  waitForDeployment(): Promise<this>;

  interface: StorageManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ancToken: TypedContractMethod<[], [string], "view">;

  getTotalANCSpent: TypedContractMethod<[], [bigint], "view">;

  getTotalPaidForFile: TypedContractMethod<
    [fileHash: BytesLike],
    [bigint],
    "view"
  >;

  getUserPaidForFile: TypedContractMethod<
    [user: AddressLike, fileHash: BytesLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_ancToken: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  payForFileStorage: TypedContractMethod<
    [fileHash: BytesLike, amount: BigNumberish, purpose: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalANCSpent: TypedContractMethod<[], [bigint], "view">;

  totalPaidANC: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userPaidANC: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ancToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalANCSpent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalPaidForFile"
  ): TypedContractMethod<[fileHash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserPaidForFile"
  ): TypedContractMethod<
    [user: AddressLike, fileHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_ancToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payForFileStorage"
  ): TypedContractMethod<
    [fileHash: BytesLike, amount: BigNumberish, purpose: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalANCSpent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPaidANC"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPaidANC"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ANCSpent"
  ): TypedContractEvent<
    ANCSpentEvent.InputTuple,
    ANCSpentEvent.OutputTuple,
    ANCSpentEvent.OutputObject
  >;
  getEvent(
    key: "FileStoragePaid"
  ): TypedContractEvent<
    FileStoragePaidEvent.InputTuple,
    FileStoragePaidEvent.OutputTuple,
    FileStoragePaidEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ANCSpent(address,uint256,string)": TypedContractEvent<
      ANCSpentEvent.InputTuple,
      ANCSpentEvent.OutputTuple,
      ANCSpentEvent.OutputObject
    >;
    ANCSpent: TypedContractEvent<
      ANCSpentEvent.InputTuple,
      ANCSpentEvent.OutputTuple,
      ANCSpentEvent.OutputObject
    >;

    "FileStoragePaid(address,bytes32,uint256)": TypedContractEvent<
      FileStoragePaidEvent.InputTuple,
      FileStoragePaidEvent.OutputTuple,
      FileStoragePaidEvent.OutputObject
    >;
    FileStoragePaid: TypedContractEvent<
      FileStoragePaidEvent.InputTuple,
      FileStoragePaidEvent.OutputTuple,
      FileStoragePaidEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
