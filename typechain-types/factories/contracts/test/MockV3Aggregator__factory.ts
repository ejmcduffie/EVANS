/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockV3Aggregator,
  MockV3AggregatorInterface,
} from "../../../contracts/test/MockV3Aggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
      {
        internalType: "int256",
        name: "_initialAnswer",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
    ],
    name: "updateAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109ca3803806109ca833981810160405281019061003291906101eb565b816000806101000a81548160ff021916908360ff16021790555080600181905550426002819055506001600360006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055506040518060a00160405280600169ffffffffffffffffffff168152602001828152602001428152602001428152602001600169ffffffffffffffffffff1681525060046000600169ffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550905050505061022b565b600080fd5b600060ff82169050919050565b6101928161017c565b811461019d57600080fd5b50565b6000815190506101af81610189565b92915050565b6000819050919050565b6101c8816101b5565b81146101d357600080fd5b50565b6000815190506101e5816101bf565b92915050565b6000806040838503121561020257610201610177565b5b6000610210858286016101a0565b9250506020610221858286016101d6565b9150509250929050565b6107908061023a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063313ce567146100515780639a6fc8f51461006f578063a87a20ce146100a3578063feaf968c146100bf575b600080fd5b6100596100e1565b6040516100669190610500565b60405180910390f35b61008960048036038101906100849190610562565b6100f2565b60405161009a9594939291906105d0565b60405180910390f35b6100bd60048036038101906100b8919061064f565b610235565b005b6100c76103d2565b6040516100d89594939291906105d0565b60405180910390f35b60008054906101000a900460ff1681565b600080600080600080600460008869ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff168152505090506000816060015111610208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ff906106d9565b60405180910390fd5b80600001518160200151826040015183606001518460800151955095509550955095505091939590929450565b80600181905550426002819055506003600081819054906101000a900469ffffffffffffffffffff168092919061026b90610728565b91906101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550506040518060a00160405280600360009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff168152602001828152602001428152602001428152602001600360009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1681525060046000600360009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555090505050565b60008060008060008060046000600360009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff168152505090508060000151816020015182604001518360600151846080015195509550955095509550509091929394565b600060ff82169050919050565b6104fa816104e4565b82525050565b600060208201905061051560008301846104f1565b92915050565b600080fd5b600069ffffffffffffffffffff82169050919050565b61053f81610520565b811461054a57600080fd5b50565b60008135905061055c81610536565b92915050565b6000602082840312156105785761057761051b565b5b60006105868482850161054d565b91505092915050565b61059881610520565b82525050565b6000819050919050565b6105b18161059e565b82525050565b6000819050919050565b6105ca816105b7565b82525050565b600060a0820190506105e5600083018861058f565b6105f260208301876105a8565b6105ff60408301866105c1565b61060c60608301856105c1565b610619608083018461058f565b9695505050505050565b61062c8161059e565b811461063757600080fd5b50565b60008135905061064981610623565b92915050565b6000602082840312156106655761066461051b565b5b60006106738482850161063a565b91505092915050565b600082825260208201905092915050565b7f4e6f20646174612070726573656e740000000000000000000000000000000000600082015250565b60006106c3600f8361067c565b91506106ce8261068d565b602082019050919050565b600060208201905081810360008301526106f2816106b6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061073382610520565b915069ffffffffffffffffffff820361074f5761074e6106f9565b5b60018201905091905056fea26469706673582212203235c65aa5813e21ffc907f37ef1f196924ac5c969e46e1cfcc432b042c3952264736f6c63430008140033";

type MockV3AggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockV3AggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockV3Aggregator__factory extends ContractFactory {
  constructor(...args: MockV3AggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _decimals: BigNumberish,
    _initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _decimals,
      _initialAnswer,
      overrides || {}
    );
  }
  override deploy(
    _decimals: BigNumberish,
    _initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_decimals, _initialAnswer, overrides || {}) as Promise<
      MockV3Aggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockV3Aggregator__factory {
    return super.connect(runner) as MockV3Aggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockV3AggregatorInterface {
    return new Interface(_abi) as MockV3AggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockV3Aggregator {
    return new Contract(address, _abi, runner) as unknown as MockV3Aggregator;
  }
}
